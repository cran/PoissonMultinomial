// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_PoissonMultinomial_RCPPEXPORTS_H_GEN_
#define RCPP_PoissonMultinomial_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace PoissonMultinomial {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("PoissonMultinomial", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("PoissonMultinomial", "_PoissonMultinomial_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in PoissonMultinomial");
            }
        }
    }

    inline arma::vec pmn_mdfft_arma(int nnt, arma::mat pp, arma::vec nn_vec, arma::vec l_vec, arma::vec cn_vec) {
        typedef SEXP(*Ptr_pmn_mdfft_arma)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_pmn_mdfft_arma p_pmn_mdfft_arma = NULL;
        if (p_pmn_mdfft_arma == NULL) {
            validateSignature("arma::vec(*pmn_mdfft_arma)(int,arma::mat,arma::vec,arma::vec,arma::vec)");
            p_pmn_mdfft_arma = (Ptr_pmn_mdfft_arma)R_GetCCallable("PoissonMultinomial", "_PoissonMultinomial_pmn_mdfft_arma");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_pmn_mdfft_arma(Shield<SEXP>(Rcpp::wrap(nnt)), Shield<SEXP>(Rcpp::wrap(pp)), Shield<SEXP>(Rcpp::wrap(nn_vec)), Shield<SEXP>(Rcpp::wrap(l_vec)), Shield<SEXP>(Rcpp::wrap(cn_vec)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline arma::vec rpmd_arma(arma::mat pp) {
        typedef SEXP(*Ptr_rpmd_arma)(SEXP);
        static Ptr_rpmd_arma p_rpmd_arma = NULL;
        if (p_rpmd_arma == NULL) {
            validateSignature("arma::vec(*rpmd_arma)(arma::mat)");
            p_rpmd_arma = (Ptr_rpmd_arma)R_GetCCallable("PoissonMultinomial", "_PoissonMultinomial_rpmd_arma");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rpmd_arma(Shield<SEXP>(Rcpp::wrap(pp)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline double pmd_simulation_singlepoint(arma::mat pp, arma::vec x_vec, int t) {
        typedef SEXP(*Ptr_pmd_simulation_singlepoint)(SEXP,SEXP,SEXP);
        static Ptr_pmd_simulation_singlepoint p_pmd_simulation_singlepoint = NULL;
        if (p_pmd_simulation_singlepoint == NULL) {
            validateSignature("double(*pmd_simulation_singlepoint)(arma::mat,arma::vec,int)");
            p_pmd_simulation_singlepoint = (Ptr_pmd_simulation_singlepoint)R_GetCCallable("PoissonMultinomial", "_PoissonMultinomial_pmd_simulation_singlepoint");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_pmd_simulation_singlepoint(Shield<SEXP>(Rcpp::wrap(pp)), Shield<SEXP>(Rcpp::wrap(x_vec)), Shield<SEXP>(Rcpp::wrap(t)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline arma::vec pmd_simulation_allpoints(arma::mat pp, int nnt, arma::vec l_vec, arma::vec cn_vec, int t) {
        typedef SEXP(*Ptr_pmd_simulation_allpoints)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_pmd_simulation_allpoints p_pmd_simulation_allpoints = NULL;
        if (p_pmd_simulation_allpoints == NULL) {
            validateSignature("arma::vec(*pmd_simulation_allpoints)(arma::mat,int,arma::vec,arma::vec,int)");
            p_pmd_simulation_allpoints = (Ptr_pmd_simulation_allpoints)R_GetCCallable("PoissonMultinomial", "_PoissonMultinomial_pmd_simulation_allpoints");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_pmd_simulation_allpoints(Shield<SEXP>(Rcpp::wrap(pp)), Shield<SEXP>(Rcpp::wrap(nnt)), Shield<SEXP>(Rcpp::wrap(l_vec)), Shield<SEXP>(Rcpp::wrap(cn_vec)), Shield<SEXP>(Rcpp::wrap(t)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

}

#endif // RCPP_PoissonMultinomial_RCPPEXPORTS_H_GEN_
